
lcd_keybad_layered.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000f62  00000ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005a  008000a0  008000a0  00001036  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001036  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020a3  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6c  00000000  00000000  0000327f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df6  00000000  00000000  00003deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00004be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cd  00000000  00000000  00004e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000127b  00000000  00000000  00005655  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3f       	cpi	r26, 0xFA	; 250
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
  8a:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <arrayofnum>:



void arrayofnum(long * arr ,long num)
{
	arr[I]=num;
  92:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__data_end>
  96:	34 e0       	ldi	r19, 0x04	; 4
  98:	23 9f       	mul	r18, r19
  9a:	80 0d       	add	r24, r0
  9c:	91 1d       	adc	r25, r1
  9e:	11 24       	eor	r1, r1
  a0:	fc 01       	movw	r30, r24
  a2:	40 83       	st	Z, r20
  a4:	51 83       	std	Z+1, r21	; 0x01
  a6:	62 83       	std	Z+2, r22	; 0x02
  a8:	73 83       	std	Z+3, r23	; 0x03
  aa:	08 95       	ret

000000ac <operation>:
	
}

 void operation(long * u,long W,UINT8 oper)
{
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
	long k;
	switch (W)
  b4:	4b 30       	cpi	r20, 0x0B	; 11
  b6:	51 05       	cpc	r21, r1
  b8:	61 05       	cpc	r22, r1
  ba:	71 05       	cpc	r23, r1
  bc:	a9 f1       	breq	.+106    	; 0x128 <operation+0x7c>
  be:	34 f4       	brge	.+12     	; 0xcc <operation+0x20>
  c0:	4a 30       	cpi	r20, 0x0A	; 10
  c2:	51 05       	cpc	r21, r1
  c4:	61 05       	cpc	r22, r1
  c6:	71 05       	cpc	r23, r1
  c8:	71 f0       	breq	.+28     	; 0xe6 <operation+0x3a>
  ca:	90 c0       	rjmp	.+288    	; 0x1ec <operation+0x140>
  cc:	4c 30       	cpi	r20, 0x0C	; 12
  ce:	51 05       	cpc	r21, r1
  d0:	61 05       	cpc	r22, r1
  d2:	71 05       	cpc	r23, r1
  d4:	09 f4       	brne	.+2      	; 0xd8 <operation+0x2c>
  d6:	47 c0       	rjmp	.+142    	; 0x166 <operation+0xba>
  d8:	4d 30       	cpi	r20, 0x0D	; 13
  da:	51 05       	cpc	r21, r1
  dc:	61 05       	cpc	r22, r1
  de:	71 05       	cpc	r23, r1
  e0:	09 f4       	brne	.+2      	; 0xe4 <operation+0x38>
  e2:	63 c0       	rjmp	.+198    	; 0x1aa <operation+0xfe>
  e4:	83 c0       	rjmp	.+262    	; 0x1ec <operation+0x140>
	{
		case 10:
		k=u[oper]/u[oper+1];
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	8c 01       	movw	r16, r24
  f2:	02 0f       	add	r16, r18
  f4:	13 1f       	adc	r17, r19
  f6:	e9 01       	movw	r28, r18
  f8:	24 96       	adiw	r28, 0x04	; 4
  fa:	c8 0f       	add	r28, r24
  fc:	d9 1f       	adc	r29, r25
  fe:	f8 01       	movw	r30, r16
 100:	60 81       	ld	r22, Z
 102:	71 81       	ldd	r23, Z+1	; 0x01
 104:	82 81       	ldd	r24, Z+2	; 0x02
 106:	93 81       	ldd	r25, Z+3	; 0x03
 108:	28 81       	ld	r18, Y
 10a:	39 81       	ldd	r19, Y+1	; 0x01
 10c:	4a 81       	ldd	r20, Y+2	; 0x02
 10e:	5b 81       	ldd	r21, Y+3	; 0x03
 110:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodsi4>
		u[oper]=k;
 114:	f8 01       	movw	r30, r16
 116:	20 83       	st	Z, r18
 118:	31 83       	std	Z+1, r19	; 0x01
 11a:	42 83       	std	Z+2, r20	; 0x02
 11c:	53 83       	std	Z+3, r21	; 0x03
        u[oper+1]=k;
 11e:	28 83       	st	Y, r18
 120:	39 83       	std	Y+1, r19	; 0x01
 122:	4a 83       	std	Y+2, r20	; 0x02
 124:	5b 83       	std	Y+3, r21	; 0x03
		break;
 126:	62 c0       	rjmp	.+196    	; 0x1ec <operation+0x140>
		
		
		case 11:
		k=u[oper]*u[oper+1];
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	fc 01       	movw	r30, r24
 134:	e2 0f       	add	r30, r18
 136:	f3 1f       	adc	r31, r19
 138:	e9 01       	movw	r28, r18
 13a:	24 96       	adiw	r28, 0x04	; 4
 13c:	c8 0f       	add	r28, r24
 13e:	d9 1f       	adc	r29, r25
 140:	20 81       	ld	r18, Z
 142:	31 81       	ldd	r19, Z+1	; 0x01
 144:	42 81       	ldd	r20, Z+2	; 0x02
 146:	53 81       	ldd	r21, Z+3	; 0x03
 148:	68 81       	ld	r22, Y
 14a:	79 81       	ldd	r23, Y+1	; 0x01
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	9b 81       	ldd	r25, Y+3	; 0x03
 150:	0e 94 03 07 	call	0xe06	; 0xe06 <__mulsi3>
		u[oper]=k;
 154:	60 83       	st	Z, r22
 156:	71 83       	std	Z+1, r23	; 0x01
 158:	82 83       	std	Z+2, r24	; 0x02
 15a:	93 83       	std	Z+3, r25	; 0x03
		u[oper+1]=k;
 15c:	68 83       	st	Y, r22
 15e:	79 83       	std	Y+1, r23	; 0x01
 160:	8a 83       	std	Y+2, r24	; 0x02
 162:	9b 83       	std	Y+3, r25	; 0x03
		break;
 164:	43 c0       	rjmp	.+134    	; 0x1ec <operation+0x140>
		
		
		case 12:
		k=u[oper]-u[oper+1];
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	22 0f       	add	r18, r18
 16e:	33 1f       	adc	r19, r19
 170:	fc 01       	movw	r30, r24
 172:	e2 0f       	add	r30, r18
 174:	f3 1f       	adc	r31, r19
 176:	2c 5f       	subi	r18, 0xFC	; 252
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	ec 01       	movw	r28, r24
 17c:	c2 0f       	add	r28, r18
 17e:	d3 1f       	adc	r29, r19
 180:	80 81       	ld	r24, Z
 182:	91 81       	ldd	r25, Z+1	; 0x01
 184:	a2 81       	ldd	r26, Z+2	; 0x02
 186:	b3 81       	ldd	r27, Z+3	; 0x03
 188:	48 81       	ld	r20, Y
 18a:	59 81       	ldd	r21, Y+1	; 0x01
 18c:	6a 81       	ldd	r22, Y+2	; 0x02
 18e:	7b 81       	ldd	r23, Y+3	; 0x03
 190:	84 1b       	sub	r24, r20
 192:	95 0b       	sbc	r25, r21
 194:	a6 0b       	sbc	r26, r22
 196:	b7 0b       	sbc	r27, r23
		u[oper]=k;
 198:	80 83       	st	Z, r24
 19a:	91 83       	std	Z+1, r25	; 0x01
 19c:	a2 83       	std	Z+2, r26	; 0x02
 19e:	b3 83       	std	Z+3, r27	; 0x03
		u[oper+1]=k;
 1a0:	88 83       	st	Y, r24
 1a2:	99 83       	std	Y+1, r25	; 0x01
 1a4:	aa 83       	std	Y+2, r26	; 0x02
 1a6:	bb 83       	std	Y+3, r27	; 0x03
		break;
 1a8:	21 c0       	rjmp	.+66     	; 0x1ec <operation+0x140>
		
		
		case 13:
		k=u[oper]+u[oper+1];
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	fc 01       	movw	r30, r24
 1b6:	e2 0f       	add	r30, r18
 1b8:	f3 1f       	adc	r31, r19
 1ba:	2c 5f       	subi	r18, 0xFC	; 252
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
 1be:	ec 01       	movw	r28, r24
 1c0:	c2 0f       	add	r28, r18
 1c2:	d3 1f       	adc	r29, r19
 1c4:	40 81       	ld	r20, Z
 1c6:	51 81       	ldd	r21, Z+1	; 0x01
 1c8:	62 81       	ldd	r22, Z+2	; 0x02
 1ca:	73 81       	ldd	r23, Z+3	; 0x03
 1cc:	88 81       	ld	r24, Y
 1ce:	99 81       	ldd	r25, Y+1	; 0x01
 1d0:	aa 81       	ldd	r26, Y+2	; 0x02
 1d2:	bb 81       	ldd	r27, Y+3	; 0x03
 1d4:	84 0f       	add	r24, r20
 1d6:	95 1f       	adc	r25, r21
 1d8:	a6 1f       	adc	r26, r22
 1da:	b7 1f       	adc	r27, r23
		u[oper]=k;
 1dc:	80 83       	st	Z, r24
 1de:	91 83       	std	Z+1, r25	; 0x01
 1e0:	a2 83       	std	Z+2, r26	; 0x02
 1e2:	b3 83       	std	Z+3, r27	; 0x03
		u[oper+1]=k;
 1e4:	88 83       	st	Y, r24
 1e6:	99 83       	std	Y+1, r25	; 0x01
 1e8:	aa 83       	std	Y+2, r26	; 0x02
 1ea:	bb 83       	std	Y+3, r27	; 0x03
		break;
		
		
	};
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	08 95       	ret

000001f6 <reaarrange_calculation>:

void reaarrange_calculation (long * arr_num ,long * arr_opreators, UINT8 oper )
{
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	dc 01       	movw	r26, r24
	UINT8 spread;
	for (spread=oper+1;spread<I;spread++)
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	94 0f       	add	r25, r20
 208:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 20c:	98 17       	cp	r25, r24
 20e:	e0 f5       	brcc	.+120    	; 0x288 <reaarrange_calculation+0x92>
	{
		if (arr_opreators[spread]==0)
 210:	29 2f       	mov	r18, r25
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	fb 01       	movw	r30, r22
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	98 9f       	mul	r25, r24
 21a:	e0 0d       	add	r30, r0
 21c:	f1 1d       	adc	r31, r1
 21e:	11 24       	eor	r1, r1
 220:	c0 80       	ld	r12, Z
 222:	d1 80       	ldd	r13, Z+1	; 0x01
 224:	e2 80       	ldd	r14, Z+2	; 0x02
 226:	f3 80       	ldd	r15, Z+3	; 0x03
 228:	cd 28       	or	r12, r13
 22a:	ce 28       	or	r12, r14
 22c:	cf 28       	or	r12, r15
 22e:	61 f5       	brne	.+88     	; 0x288 <reaarrange_calculation+0x92>
		{
			arr_num[spread+1]=arr_num[oper];
 230:	ed 01       	movw	r28, r26
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	48 9f       	mul	r20, r24
 236:	c0 0d       	add	r28, r0
 238:	d1 1d       	adc	r29, r1
 23a:	11 24       	eor	r1, r1
 23c:	10 c0       	rjmp	.+32     	; 0x25e <reaarrange_calculation+0x68>
void reaarrange_calculation (long * arr_num ,long * arr_opreators, UINT8 oper )
{
	UINT8 spread;
	for (spread=oper+1;spread<I;spread++)
	{
		if (arr_opreators[spread]==0)
 23e:	29 2f       	mov	r18, r25
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	fb 01       	movw	r30, r22
 244:	84 e0       	ldi	r24, 0x04	; 4
 246:	98 9f       	mul	r25, r24
 248:	e0 0d       	add	r30, r0
 24a:	f1 1d       	adc	r31, r1
 24c:	11 24       	eor	r1, r1
 24e:	c0 80       	ld	r12, Z
 250:	d1 80       	ldd	r13, Z+1	; 0x01
 252:	e2 80       	ldd	r14, Z+2	; 0x02
 254:	f3 80       	ldd	r15, Z+3	; 0x03
 256:	cd 28       	or	r12, r13
 258:	ce 28       	or	r12, r14
 25a:	cf 28       	or	r12, r15
 25c:	a9 f4       	brne	.+42     	; 0x288 <reaarrange_calculation+0x92>
		{
			arr_num[spread+1]=arr_num[oper];
 25e:	c8 80       	ld	r12, Y
 260:	d9 80       	ldd	r13, Y+1	; 0x01
 262:	ea 80       	ldd	r14, Y+2	; 0x02
 264:	fb 80       	ldd	r15, Y+3	; 0x03
 266:	f9 01       	movw	r30, r18
 268:	31 96       	adiw	r30, 0x01	; 1
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ea 0f       	add	r30, r26
 274:	fb 1f       	adc	r31, r27
 276:	c0 82       	st	Z, r12
 278:	d1 82       	std	Z+1, r13	; 0x01
 27a:	e2 82       	std	Z+2, r14	; 0x02
 27c:	f3 82       	std	Z+3, r15	; 0x03
}

void reaarrange_calculation (long * arr_num ,long * arr_opreators, UINT8 oper )
{
	UINT8 spread;
	for (spread=oper+1;spread<I;spread++)
 27e:	9f 5f       	subi	r25, 0xFF	; 255
 280:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 284:	98 17       	cp	r25, r24
 286:	d8 f2       	brcs	.-74     	; 0x23e <reaarrange_calculation+0x48>
	
	};
	
	
	
	for (spread=oper-1;spread>0;spread--)
 288:	9f ef       	ldi	r25, 0xFF	; 255
 28a:	94 0f       	add	r25, r20
 28c:	b1 f1       	breq	.+108    	; 0x2fa <reaarrange_calculation+0x104>
	{
		if (arr_opreators[spread]==0)
 28e:	29 2f       	mov	r18, r25
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	fb 01       	movw	r30, r22
 29c:	e2 0f       	add	r30, r18
 29e:	f3 1f       	adc	r31, r19
 2a0:	c0 80       	ld	r12, Z
 2a2:	d1 80       	ldd	r13, Z+1	; 0x01
 2a4:	e2 80       	ldd	r14, Z+2	; 0x02
 2a6:	f3 80       	ldd	r15, Z+3	; 0x03
 2a8:	cd 28       	or	r12, r13
 2aa:	ce 28       	or	r12, r14
 2ac:	cf 28       	or	r12, r15
 2ae:	29 f5       	brne	.+74     	; 0x2fa <reaarrange_calculation+0x104>
		{
			arr_num[spread]=arr_num[oper];
 2b0:	fd 01       	movw	r30, r26
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	48 9f       	mul	r20, r24
 2b6:	e0 0d       	add	r30, r0
 2b8:	f1 1d       	adc	r31, r1
 2ba:	11 24       	eor	r1, r1
 2bc:	11 c0       	rjmp	.+34     	; 0x2e0 <reaarrange_calculation+0xea>
	
	
	
	for (spread=oper-1;spread>0;spread--)
	{
		if (arr_opreators[spread]==0)
 2be:	29 2f       	mov	r18, r25
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	22 0f       	add	r18, r18
 2c8:	33 1f       	adc	r19, r19
 2ca:	eb 01       	movw	r28, r22
 2cc:	c2 0f       	add	r28, r18
 2ce:	d3 1f       	adc	r29, r19
 2d0:	c8 80       	ld	r12, Y
 2d2:	d9 80       	ldd	r13, Y+1	; 0x01
 2d4:	ea 80       	ldd	r14, Y+2	; 0x02
 2d6:	fb 80       	ldd	r15, Y+3	; 0x03
 2d8:	cd 28       	or	r12, r13
 2da:	ce 28       	or	r12, r14
 2dc:	cf 28       	or	r12, r15
 2de:	69 f4       	brne	.+26     	; 0x2fa <reaarrange_calculation+0x104>
		{
			arr_num[spread]=arr_num[oper];
 2e0:	c0 80       	ld	r12, Z
 2e2:	d1 80       	ldd	r13, Z+1	; 0x01
 2e4:	e2 80       	ldd	r14, Z+2	; 0x02
 2e6:	f3 80       	ldd	r15, Z+3	; 0x03
 2e8:	ed 01       	movw	r28, r26
 2ea:	c2 0f       	add	r28, r18
 2ec:	d3 1f       	adc	r29, r19
 2ee:	c8 82       	st	Y, r12
 2f0:	d9 82       	std	Y+1, r13	; 0x01
 2f2:	ea 82       	std	Y+2, r14	; 0x02
 2f4:	fb 82       	std	Y+3, r15	; 0x03
	
	};
	
	
	
	for (spread=oper-1;spread>0;spread--)
 2f6:	91 50       	subi	r25, 0x01	; 1
 2f8:	11 f7       	brne	.-60     	; 0x2be <reaarrange_calculation+0xc8>
	
	
	
	
	
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	08 95       	ret

00000308 <calculation_function>:

void calculation_function(long * arr_num ,long * arr_operators)
{
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	7c 01       	movw	r14, r24
	UINT8 oper=0;
	for (oper=0;oper<I;oper++)
 314:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__data_end>
 318:	99 23       	and	r25, r25
 31a:	09 f4       	brne	.+2      	; 0x31e <calculation_function+0x16>
 31c:	9d c0       	rjmp	.+314    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 31e:	eb 01       	movw	r28, r22
 320:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (arr_operators[oper]==10)
 322:	fe 01       	movw	r30, r28
 324:	84 e0       	ldi	r24, 0x04	; 4
 326:	18 9f       	mul	r17, r24
 328:	e0 0d       	add	r30, r0
 32a:	f1 1d       	adc	r31, r1
 32c:	11 24       	eor	r1, r1
 32e:	80 81       	ld	r24, Z
 330:	91 81       	ldd	r25, Z+1	; 0x01
 332:	a2 81       	ldd	r26, Z+2	; 0x02
 334:	b3 81       	ldd	r27, Z+3	; 0x03
 336:	0a 97       	sbiw	r24, 0x0a	; 10
 338:	a1 05       	cpc	r26, r1
 33a:	b1 05       	cpc	r27, r1
 33c:	89 f4       	brne	.+34     	; 0x360 <calculation_function+0x58>
		{
			arr_operators[oper]=0;
 33e:	10 82       	st	Z, r1
 340:	11 82       	std	Z+1, r1	; 0x01
 342:	12 82       	std	Z+2, r1	; 0x02
 344:	13 82       	std	Z+3, r1	; 0x03
			operation(arr_num,10,oper);
 346:	21 2f       	mov	r18, r17
 348:	4a e0       	ldi	r20, 0x0A	; 10
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	c7 01       	movw	r24, r14
 352:	0e 94 56 00 	call	0xac	; 0xac <operation>
			reaarrange_calculation ( arr_num , arr_operators, oper );
 356:	41 2f       	mov	r20, r17
 358:	be 01       	movw	r22, r28
 35a:	c7 01       	movw	r24, r14
 35c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <reaarrange_calculation>
}

void calculation_function(long * arr_num ,long * arr_operators)
{
	UINT8 oper=0;
	for (oper=0;oper<I;oper++)
 360:	1f 5f       	subi	r17, 0xFF	; 255
 362:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 366:	18 17       	cp	r17, r24
 368:	e0 f2       	brcs	.-72     	; 0x322 <calculation_function+0x1a>

		
	};
	
	
	for (oper=0;oper<I;oper++)
 36a:	88 23       	and	r24, r24
 36c:	09 f4       	brne	.+2      	; 0x370 <calculation_function+0x68>
 36e:	74 c0       	rjmp	.+232    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 370:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (arr_operators[oper]==11)
 372:	fe 01       	movw	r30, r28
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	18 9f       	mul	r17, r24
 378:	e0 0d       	add	r30, r0
 37a:	f1 1d       	adc	r31, r1
 37c:	11 24       	eor	r1, r1
 37e:	80 81       	ld	r24, Z
 380:	91 81       	ldd	r25, Z+1	; 0x01
 382:	a2 81       	ldd	r26, Z+2	; 0x02
 384:	b3 81       	ldd	r27, Z+3	; 0x03
 386:	0b 97       	sbiw	r24, 0x0b	; 11
 388:	a1 05       	cpc	r26, r1
 38a:	b1 05       	cpc	r27, r1
 38c:	89 f4       	brne	.+34     	; 0x3b0 <calculation_function+0xa8>
		{
			arr_operators[oper]=0;
 38e:	10 82       	st	Z, r1
 390:	11 82       	std	Z+1, r1	; 0x01
 392:	12 82       	std	Z+2, r1	; 0x02
 394:	13 82       	std	Z+3, r1	; 0x03
			operation(arr_num,11,oper);
 396:	21 2f       	mov	r18, r17
 398:	4b e0       	ldi	r20, 0x0B	; 11
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	c7 01       	movw	r24, r14
 3a2:	0e 94 56 00 	call	0xac	; 0xac <operation>
			reaarrange_calculation (arr_num ,arr_operators, oper );
 3a6:	41 2f       	mov	r20, r17
 3a8:	be 01       	movw	r22, r28
 3aa:	c7 01       	movw	r24, r14
 3ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <reaarrange_calculation>

		
	};
	
	
	for (oper=0;oper<I;oper++)
 3b0:	1f 5f       	subi	r17, 0xFF	; 255
 3b2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 3b6:	18 17       	cp	r17, r24
 3b8:	e0 f2       	brcs	.-72     	; 0x372 <calculation_function+0x6a>
		
	};
	
	
	
	for (oper=0;oper<I;oper++)
 3ba:	88 23       	and	r24, r24
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <calculation_function+0xb8>
 3be:	4c c0       	rjmp	.+152    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 3c0:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (arr_operators[oper]==12)
 3c2:	fe 01       	movw	r30, r28
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	18 9f       	mul	r17, r24
 3c8:	e0 0d       	add	r30, r0
 3ca:	f1 1d       	adc	r31, r1
 3cc:	11 24       	eor	r1, r1
 3ce:	80 81       	ld	r24, Z
 3d0:	91 81       	ldd	r25, Z+1	; 0x01
 3d2:	a2 81       	ldd	r26, Z+2	; 0x02
 3d4:	b3 81       	ldd	r27, Z+3	; 0x03
 3d6:	0c 97       	sbiw	r24, 0x0c	; 12
 3d8:	a1 05       	cpc	r26, r1
 3da:	b1 05       	cpc	r27, r1
 3dc:	89 f4       	brne	.+34     	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			arr_operators[oper]=0;
 3de:	10 82       	st	Z, r1
 3e0:	11 82       	std	Z+1, r1	; 0x01
 3e2:	12 82       	std	Z+2, r1	; 0x02
 3e4:	13 82       	std	Z+3, r1	; 0x03
		operation(arr_num,12,oper);
 3e6:	21 2f       	mov	r18, r17
 3e8:	4c e0       	ldi	r20, 0x0C	; 12
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	c7 01       	movw	r24, r14
 3f2:	0e 94 56 00 	call	0xac	; 0xac <operation>
		reaarrange_calculation (arr_num ,arr_operators, oper );
 3f6:	41 2f       	mov	r20, r17
 3f8:	be 01       	movw	r22, r28
 3fa:	c7 01       	movw	r24, r14
 3fc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <reaarrange_calculation>
		
	};
	
	
	
	for (oper=0;oper<I;oper++)
 400:	1f 5f       	subi	r17, 0xFF	; 255
 402:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 406:	18 17       	cp	r17, r24
 408:	e0 f2       	brcs	.-72     	; 0x3c2 <calculation_function+0xba>

		
	};
	
	
	for (oper=0;oper<I;oper++)
 40a:	88 23       	and	r24, r24
 40c:	29 f1       	breq	.+74     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 40e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (arr_operators[oper]==13)
 410:	fe 01       	movw	r30, r28
 412:	84 e0       	ldi	r24, 0x04	; 4
 414:	18 9f       	mul	r17, r24
 416:	e0 0d       	add	r30, r0
 418:	f1 1d       	adc	r31, r1
 41a:	11 24       	eor	r1, r1
 41c:	80 81       	ld	r24, Z
 41e:	91 81       	ldd	r25, Z+1	; 0x01
 420:	a2 81       	ldd	r26, Z+2	; 0x02
 422:	b3 81       	ldd	r27, Z+3	; 0x03
 424:	0d 97       	sbiw	r24, 0x0d	; 13
 426:	a1 05       	cpc	r26, r1
 428:	b1 05       	cpc	r27, r1
 42a:	89 f4       	brne	.+34     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		{
			arr_operators[oper]=0;
 42c:	10 82       	st	Z, r1
 42e:	11 82       	std	Z+1, r1	; 0x01
 430:	12 82       	std	Z+2, r1	; 0x02
 432:	13 82       	std	Z+3, r1	; 0x03
			operation(arr_num,13,oper);
 434:	21 2f       	mov	r18, r17
 436:	4d e0       	ldi	r20, 0x0D	; 13
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	c7 01       	movw	r24, r14
 440:	0e 94 56 00 	call	0xac	; 0xac <operation>
			reaarrange_calculation (arr_num ,arr_operators, oper );
 444:	41 2f       	mov	r20, r17
 446:	be 01       	movw	r22, r28
 448:	c7 01       	movw	r24, r14
 44a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <reaarrange_calculation>

		
	};
	
	
	for (oper=0;oper<I;oper++)
 44e:	1f 5f       	subi	r17, 0xFF	; 255
 450:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 454:	18 17       	cp	r17, r24
 456:	e0 f2       	brcs	.-72     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		
	};
	
	
	
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	08 95       	ret

00000464 <cleararr>:
void cleararr(long * V)
{
 464:	fc 01       	movw	r30, r24
 466:	88 96       	adiw	r24, 0x28	; 40
	UINT8 CL=0;
	for(CL=0;CL<10;CL++){
		V[CL]=0;
 468:	11 92       	st	Z+, r1
 46a:	11 92       	st	Z+, r1
 46c:	11 92       	st	Z+, r1
 46e:	11 92       	st	Z+, r1
	
}
void cleararr(long * V)
{
	UINT8 CL=0;
	for(CL=0;CL<10;CL++){
 470:	e8 17       	cp	r30, r24
 472:	f9 07       	cpc	r31, r25
 474:	c9 f7       	brne	.-14     	; 0x468 <cleararr+0x4>
		V[CL]=0;
	};
	
	
 476:	08 95       	ret

00000478 <summation>:
#include "calculator.h"
long base=0;
long sum=0;
UINT8 I=0;
void summation()
{
 478:	4f 92       	push	r4
 47a:	5f 92       	push	r5
 47c:	6f 92       	push	r6
 47e:	7f 92       	push	r7
 480:	8f 92       	push	r8
 482:	9f 92       	push	r9
 484:	af 92       	push	r10
 486:	bf 92       	push	r11
 488:	cf 92       	push	r12
 48a:	df 92       	push	r13
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	2a 97       	sbiw	r28, 0x0a	; 10
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
	char op [10];
	ZER0=0;
 4a4:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <ZER0>
	long x, y, z, m;
	
	x=CheckR0();
 4a8:	0e 94 39 04 	call	0x872	; 0x872 <CheckR0>
 4ac:	6b 01       	movw	r12, r22
 4ae:	7c 01       	movw	r14, r24
	y=CheckR1();
 4b0:	0e 94 95 04 	call	0x92a	; 0x92a <CheckR1>
 4b4:	2b 01       	movw	r4, r22
 4b6:	3c 01       	movw	r6, r24
	z=CheckR2();
 4b8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <CheckR2>
 4bc:	4b 01       	movw	r8, r22
 4be:	5c 01       	movw	r10, r24
	m=CheckR3();
 4c0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <CheckR3>
	long n=x+y+z+m;
 4c4:	c4 0c       	add	r12, r4
 4c6:	d5 1c       	adc	r13, r5
 4c8:	e6 1c       	adc	r14, r6
 4ca:	f7 1c       	adc	r15, r7
 4cc:	c8 0c       	add	r12, r8
 4ce:	d9 1c       	adc	r13, r9
 4d0:	ea 1c       	adc	r14, r10
 4d2:	fb 1c       	adc	r15, r11
 4d4:	c6 0e       	add	r12, r22
 4d6:	d7 1e       	adc	r13, r23
 4d8:	e8 1e       	adc	r14, r24
 4da:	f9 1e       	adc	r15, r25
	if ((x+y+z+m)==0)
 4dc:	c1 14       	cp	r12, r1
 4de:	d1 04       	cpc	r13, r1
 4e0:	e1 04       	cpc	r14, r1
 4e2:	f1 04       	cpc	r15, r1
 4e4:	81 f5       	brne	.+96     	; 0x546 <summation+0xce>
	{
		switch (ZER0)
 4e6:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <ZER0>
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <summation+0x78>
 4ee:	e6 c0       	rjmp	.+460    	; 0x6bc <summation+0x244>
			break;
			
			
			case 1:
			sum =x+y+z+m+(base*10);
			base=sum;
 4f0:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <base>
 4f4:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <base+0x1>
 4f8:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <base+0x2>
 4fc:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <base+0x3>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	aa 1f       	adc	r26, r26
 506:	bb 1f       	adc	r27, r27
 508:	ac 01       	movw	r20, r24
 50a:	bd 01       	movw	r22, r26
 50c:	44 0f       	add	r20, r20
 50e:	55 1f       	adc	r21, r21
 510:	66 1f       	adc	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	44 0f       	add	r20, r20
 516:	55 1f       	adc	r21, r21
 518:	66 1f       	adc	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	84 0f       	add	r24, r20
 51e:	95 1f       	adc	r25, r21
 520:	a6 1f       	adc	r26, r22
 522:	b7 1f       	adc	r27, r23
 524:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <base>
 528:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <base+0x1>
 52c:	a0 93 a7 00 	sts	0x00A7, r26	; 0x8000a7 <base+0x2>
 530:	b0 93 a8 00 	sts	0x00A8, r27	; 0x8000a8 <base+0x3>
			sum=0;
 534:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <sum>
 538:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <sum+0x1>
 53c:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <sum+0x2>
 540:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <sum+0x3>
			
			break;
 544:	bb c0       	rjmp	.+374    	; 0x6bc <summation+0x244>
			
		};
	}
	else if ((x+y+z+m)>9)
 546:	8a e0       	ldi	r24, 0x0A	; 10
 548:	c8 16       	cp	r12, r24
 54a:	d1 04       	cpc	r13, r1
 54c:	e1 04       	cpc	r14, r1
 54e:	f1 04       	cpc	r15, r1
 550:	0c f4       	brge	.+2      	; 0x554 <summation+0xdc>
 552:	86 c0       	rjmp	.+268    	; 0x660 <summation+0x1e8>

	{
		if ((x+y+z+m)<14)
 554:	8e e0       	ldi	r24, 0x0E	; 14
 556:	c8 16       	cp	r12, r24
 558:	d1 04       	cpc	r13, r1
 55a:	e1 04       	cpc	r14, r1
 55c:	f1 04       	cpc	r15, r1
 55e:	44 f5       	brge	.+80     	; 0x5b0 <summation+0x138>
		{
			arrayofnum(calculated_num,base);
 560:	40 91 a5 00 	lds	r20, 0x00A5	; 0x8000a5 <base>
 564:	50 91 a6 00 	lds	r21, 0x00A6	; 0x8000a6 <base+0x1>
 568:	60 91 a7 00 	lds	r22, 0x00A7	; 0x8000a7 <base+0x2>
 56c:	70 91 a8 00 	lds	r23, 0x00A8	; 0x8000a8 <base+0x3>
 570:	81 ed       	ldi	r24, 0xD1	; 209
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 49 00 	call	0x92	; 0x92 <arrayofnum>
			arrayofnum(operators,n);
 578:	b7 01       	movw	r22, r14
 57a:	a6 01       	movw	r20, r12
 57c:	89 ea       	ldi	r24, 0xA9	; 169
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 49 00 	call	0x92	; 0x92 <arrayofnum>
			base=0;
 584:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <base>
 588:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <base+0x1>
 58c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <base+0x2>
 590:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <base+0x3>
			sum=0;
 594:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <sum>
 598:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <sum+0x1>
 59c:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <sum+0x2>
 5a0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <sum+0x3>
			I++;
 5a4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
 5ae:	86 c0       	rjmp	.+268    	; 0x6bc <summation+0x244>
		}
	else if((x+y+z+m)==14)
 5b0:	8e e0       	ldi	r24, 0x0E	; 14
 5b2:	c8 16       	cp	r12, r24
 5b4:	d1 04       	cpc	r13, r1
 5b6:	e1 04       	cpc	r14, r1
 5b8:	f1 04       	cpc	r15, r1
 5ba:	b9 f5       	brne	.+110    	; 0x62a <summation+0x1b2>
		 {
			arrayofnum(calculated_num,base);
 5bc:	40 91 a5 00 	lds	r20, 0x00A5	; 0x8000a5 <base>
 5c0:	50 91 a6 00 	lds	r21, 0x00A6	; 0x8000a6 <base+0x1>
 5c4:	60 91 a7 00 	lds	r22, 0x00A7	; 0x8000a7 <base+0x2>
 5c8:	70 91 a8 00 	lds	r23, 0x00A8	; 0x8000a8 <base+0x3>
 5cc:	81 ed       	ldi	r24, 0xD1	; 209
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 49 00 	call	0x92	; 0x92 <arrayofnum>
			calculation_function(calculated_num ,operators);
 5d4:	69 ea       	ldi	r22, 0xA9	; 169
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	81 ed       	ldi	r24, 0xD1	; 209
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 84 01 	call	0x308	; 0x308 <calculation_function>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 5e0:	60 91 d5 00 	lds	r22, 0x00D5	; 0x8000d5 <calculated_num+0x4>
 5e4:	70 91 d6 00 	lds	r23, 0x00D6	; 0x8000d6 <calculated_num+0x5>
 5e8:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <calculated_num+0x6>
 5ec:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <calculated_num+0x7>
 5f0:	2a e0       	ldi	r18, 0x0A	; 10
 5f2:	ae 01       	movw	r20, r28
 5f4:	4f 5f       	subi	r20, 0xFF	; 255
 5f6:	5f 4f       	sbci	r21, 0xFF	; 255
 5f8:	0e 94 6e 07 	call	0xedc	; 0xedc <__ltoa_ncheck>
		ltoa(calculated_num[1],op,10);
		LCD_SendString(op);
 5fc:	ce 01       	movw	r24, r28
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_SendString>
			
			base=0;
 604:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <base>
 608:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <base+0x1>
 60c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <base+0x2>
 610:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <base+0x3>
			sum=0;
 614:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <sum>
 618:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <sum+0x1>
 61c:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <sum+0x2>
 620:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <sum+0x3>
			I=0;
 624:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
 628:	49 c0       	rjmp	.+146    	; 0x6bc <summation+0x244>
			
		}
		else
		{
			cleararr(calculated_num);
 62a:	81 ed       	ldi	r24, 0xD1	; 209
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 32 02 	call	0x464	; 0x464 <cleararr>
			cleararr(operators);
 632:	89 ea       	ldi	r24, 0xA9	; 169
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 32 02 	call	0x464	; 0x464 <cleararr>
			base=0;
 63a:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <base>
 63e:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <base+0x1>
 642:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <base+0x2>
 646:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <base+0x3>
			sum=0;
 64a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <sum>
 64e:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <sum+0x1>
 652:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <sum+0x2>
 656:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <sum+0x3>
			 I=0;
 65a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
 65e:	2e c0       	rjmp	.+92     	; 0x6bc <summation+0x244>
		
	}
	else
	{
		sum =x+y+z+m+(base*10);
		base=sum;
 660:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <base>
 664:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <base+0x1>
 668:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <base+0x2>
 66c:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <base+0x3>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	aa 1f       	adc	r26, r26
 676:	bb 1f       	adc	r27, r27
 678:	ac 01       	movw	r20, r24
 67a:	bd 01       	movw	r22, r26
 67c:	44 0f       	add	r20, r20
 67e:	55 1f       	adc	r21, r21
 680:	66 1f       	adc	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	44 0f       	add	r20, r20
 686:	55 1f       	adc	r21, r21
 688:	66 1f       	adc	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	84 0f       	add	r24, r20
 68e:	95 1f       	adc	r25, r21
 690:	a6 1f       	adc	r26, r22
 692:	b7 1f       	adc	r27, r23
 694:	c8 0e       	add	r12, r24
 696:	d9 1e       	adc	r13, r25
 698:	ea 1e       	adc	r14, r26
 69a:	fb 1e       	adc	r15, r27
 69c:	c0 92 a5 00 	sts	0x00A5, r12	; 0x8000a5 <base>
 6a0:	d0 92 a6 00 	sts	0x00A6, r13	; 0x8000a6 <base+0x1>
 6a4:	e0 92 a7 00 	sts	0x00A7, r14	; 0x8000a7 <base+0x2>
 6a8:	f0 92 a8 00 	sts	0x00A8, r15	; 0x8000a8 <base+0x3>
		sum=0;
 6ac:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <sum>
 6b0:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <sum+0x1>
 6b4:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <sum+0x2>
 6b8:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <sum+0x3>
	};
	
	
}
 6bc:	2a 96       	adiw	r28, 0x0a	; 10
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	f8 94       	cli
 6c2:	de bf       	out	0x3e, r29	; 62
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	cd bf       	out	0x3d, r28	; 61
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	ff 90       	pop	r15
 6ce:	ef 90       	pop	r14
 6d0:	df 90       	pop	r13
 6d2:	cf 90       	pop	r12
 6d4:	bf 90       	pop	r11
 6d6:	af 90       	pop	r10
 6d8:	9f 90       	pop	r9
 6da:	8f 90       	pop	r8
 6dc:	7f 90       	pop	r7
 6de:	6f 90       	pop	r6
 6e0:	5f 90       	pop	r5
 6e2:	4f 90       	pop	r4
 6e4:	08 95       	ret

000006e6 <write>:
 *  Author: dell
 */ 
#include "DIO.h"
void write(Dio_channelstypes channelID,stdlevel_types channellevel){
Dio_portstypes   portx=channelID/8;
Dio_channelstypes channelpos= channelID%8;
 6e6:	98 2f       	mov	r25, r24
 6e8:	97 70       	andi	r25, 0x07	; 7
switch (portx){
 6ea:	86 95       	lsr	r24
 6ec:	86 95       	lsr	r24
 6ee:	86 95       	lsr	r24
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	21 f1       	breq	.+72     	; 0x73c <write+0x56>
 6f4:	30 f0       	brcs	.+12     	; 0x702 <write+0x1c>
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	f1 f1       	breq	.+124    	; 0x776 <write+0x90>
 6fa:	83 30       	cpi	r24, 0x03	; 3
 6fc:	09 f4       	brne	.+2      	; 0x700 <write+0x1a>
 6fe:	58 c0       	rjmp	.+176    	; 0x7b0 <write+0xca>
 700:	08 95       	ret
	case DIO_PORTA:
	if (channellevel==std_high)
 702:	61 30       	cpi	r22, 0x01	; 1
 704:	69 f4       	brne	.+26     	; 0x720 <write+0x3a>
	{
		setbit(PORTA_reg,channelpos);
 706:	4b b3       	in	r20, 0x1b	; 27
 708:	21 e0       	ldi	r18, 0x01	; 1
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	b9 01       	movw	r22, r18
 70e:	02 c0       	rjmp	.+4      	; 0x714 <write+0x2e>
 710:	66 0f       	add	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	9a 95       	dec	r25
 716:	e2 f7       	brpl	.-8      	; 0x710 <write+0x2a>
 718:	cb 01       	movw	r24, r22
 71a:	84 2b       	or	r24, r20
 71c:	8b bb       	out	0x1b, r24	; 27
 71e:	08 95       	ret
	} 
	else
	{
		clearbit(PORTA_reg,channelpos);
 720:	4b b3       	in	r20, 0x1b	; 27
 722:	21 e0       	ldi	r18, 0x01	; 1
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	b9 01       	movw	r22, r18
 728:	02 c0       	rjmp	.+4      	; 0x72e <write+0x48>
 72a:	66 0f       	add	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	9a 95       	dec	r25
 730:	e2 f7       	brpl	.-8      	; 0x72a <write+0x44>
 732:	cb 01       	movw	r24, r22
 734:	80 95       	com	r24
 736:	84 23       	and	r24, r20
 738:	8b bb       	out	0x1b, r24	; 27
 73a:	08 95       	ret
	}
	
	break;
	
	case DIO_PORTB:
	if (channellevel==std_high)
 73c:	61 30       	cpi	r22, 0x01	; 1
 73e:	69 f4       	brne	.+26     	; 0x75a <write+0x74>
	{
		setbit(PORTB_reg,channelpos);
 740:	48 b3       	in	r20, 0x18	; 24
 742:	21 e0       	ldi	r18, 0x01	; 1
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	b9 01       	movw	r22, r18
 748:	02 c0       	rjmp	.+4      	; 0x74e <write+0x68>
 74a:	66 0f       	add	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	9a 95       	dec	r25
 750:	e2 f7       	brpl	.-8      	; 0x74a <write+0x64>
 752:	cb 01       	movw	r24, r22
 754:	84 2b       	or	r24, r20
 756:	88 bb       	out	0x18, r24	; 24
 758:	08 95       	ret
	}
	else
	{
		clearbit(PORTB_reg,channelpos);
 75a:	48 b3       	in	r20, 0x18	; 24
 75c:	21 e0       	ldi	r18, 0x01	; 1
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	b9 01       	movw	r22, r18
 762:	02 c0       	rjmp	.+4      	; 0x768 <write+0x82>
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	9a 95       	dec	r25
 76a:	e2 f7       	brpl	.-8      	; 0x764 <write+0x7e>
 76c:	cb 01       	movw	r24, r22
 76e:	80 95       	com	r24
 770:	84 23       	and	r24, r20
 772:	88 bb       	out	0x18, r24	; 24
 774:	08 95       	ret
	}
	
	break;
	
	case DIO_PORTC:
	if (channellevel==std_high)
 776:	61 30       	cpi	r22, 0x01	; 1
 778:	69 f4       	brne	.+26     	; 0x794 <write+0xae>
	{
		setbit(PORTC_reg,channelpos);
 77a:	45 b3       	in	r20, 0x15	; 21
 77c:	21 e0       	ldi	r18, 0x01	; 1
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	b9 01       	movw	r22, r18
 782:	02 c0       	rjmp	.+4      	; 0x788 <write+0xa2>
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	9a 95       	dec	r25
 78a:	e2 f7       	brpl	.-8      	; 0x784 <write+0x9e>
 78c:	cb 01       	movw	r24, r22
 78e:	84 2b       	or	r24, r20
 790:	85 bb       	out	0x15, r24	; 21
 792:	08 95       	ret
	}
	else
	{
		clearbit(PORTC_reg,channelpos);
 794:	45 b3       	in	r20, 0x15	; 21
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	b9 01       	movw	r22, r18
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <write+0xbc>
 79e:	66 0f       	add	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	9a 95       	dec	r25
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <write+0xb8>
 7a6:	cb 01       	movw	r24, r22
 7a8:	80 95       	com	r24
 7aa:	84 23       	and	r24, r20
 7ac:	85 bb       	out	0x15, r24	; 21
 7ae:	08 95       	ret
	
	break;
	
	case DIO_PORTD:
	
	if (channellevel==std_high)
 7b0:	61 30       	cpi	r22, 0x01	; 1
 7b2:	69 f4       	brne	.+26     	; 0x7ce <write+0xe8>
	{
		setbit(PORTD_reg,channelpos);
 7b4:	42 b3       	in	r20, 0x12	; 18
 7b6:	21 e0       	ldi	r18, 0x01	; 1
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	b9 01       	movw	r22, r18
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <write+0xdc>
 7be:	66 0f       	add	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	9a 95       	dec	r25
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <write+0xd8>
 7c6:	cb 01       	movw	r24, r22
 7c8:	84 2b       	or	r24, r20
 7ca:	82 bb       	out	0x12, r24	; 18
 7cc:	08 95       	ret
	}
	else
	{
		clearbit(PORTD_reg,channelpos);
 7ce:	42 b3       	in	r20, 0x12	; 18
 7d0:	21 e0       	ldi	r18, 0x01	; 1
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	b9 01       	movw	r22, r18
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <write+0xf6>
 7d8:	66 0f       	add	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	9a 95       	dec	r25
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <write+0xf2>
 7e0:	cb 01       	movw	r24, r22
 7e2:	80 95       	com	r24
 7e4:	84 23       	and	r24, r20
 7e6:	82 bb       	out	0x12, r24	; 18
 7e8:	08 95       	ret

000007ea <read>:
}

stdlevel_types read(Dio_channelstypes channelID){
	stdlevel_types bitvalue=0;
	Dio_portstypes   portx=channelID/8;
	Dio_channelstypes channelpos= channelID%8;
 7ea:	28 2f       	mov	r18, r24
 7ec:	27 70       	andi	r18, 0x07	; 7
	switch (portx){
 7ee:	86 95       	lsr	r24
 7f0:	86 95       	lsr	r24
 7f2:	86 95       	lsr	r24
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	79 f0       	breq	.+30     	; 0x816 <read+0x2c>
 7f8:	28 f0       	brcs	.+10     	; 0x804 <read+0x1a>
 7fa:	82 30       	cpi	r24, 0x02	; 2
 7fc:	a9 f0       	breq	.+42     	; 0x828 <read+0x3e>
 7fe:	83 30       	cpi	r24, 0x03	; 3
 800:	e1 f0       	breq	.+56     	; 0x83a <read+0x50>
 802:	24 c0       	rjmp	.+72     	; 0x84c <read+0x62>
		case DIO_PORTA:
    bitvalue=getbit(PINA_reg,channelpos);
 804:	89 b3       	in	r24, 0x19	; 25
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <read+0x24>
 80a:	95 95       	asr	r25
 80c:	87 95       	ror	r24
 80e:	2a 95       	dec	r18
 810:	e2 f7       	brpl	.-8      	; 0x80a <read+0x20>
 812:	81 70       	andi	r24, 0x01	; 1
	   break;
 814:	08 95       	ret
		
		case DIO_PORTB:
	 bitvalue=getbit(PINB_reg,channelpos);
 816:	86 b3       	in	r24, 0x16	; 22
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <read+0x36>
 81c:	95 95       	asr	r25
 81e:	87 95       	ror	r24
 820:	2a 95       	dec	r18
 822:	e2 f7       	brpl	.-8      	; 0x81c <read+0x32>
 824:	81 70       	andi	r24, 0x01	; 1
		
		break;
 826:	08 95       	ret
		
		case DIO_PORTC:
	 bitvalue=getbit(PINC_reg,channelpos);
 828:	83 b3       	in	r24, 0x13	; 19
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <read+0x48>
 82e:	95 95       	asr	r25
 830:	87 95       	ror	r24
 832:	2a 95       	dec	r18
 834:	e2 f7       	brpl	.-8      	; 0x82e <read+0x44>
 836:	81 70       	andi	r24, 0x01	; 1
		
		break;
 838:	08 95       	ret
		
		case DIO_PORTD:
		
	 bitvalue=getbit(PIND_reg,channelpos);
 83a:	80 b3       	in	r24, 0x10	; 16
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <read+0x5a>
 840:	95 95       	asr	r25
 842:	87 95       	ror	r24
 844:	2a 95       	dec	r18
 846:	e2 f7       	brpl	.-8      	; 0x840 <read+0x56>
 848:	81 70       	andi	r24, 0x01	; 1
		break;
 84a:	08 95       	ret
	
};
}

stdlevel_types read(Dio_channelstypes channelID){
	stdlevel_types bitvalue=0;
 84c:	80 e0       	ldi	r24, 0x00	; 0
	};
	
	
	return bitvalue;
	
 84e:	08 95       	ret

00000850 <keypad_ini>:
#include "keybad.h"


void keypad_ini()
{
	write(C0,std_high);
 850:	61 e0       	ldi	r22, 0x01	; 1
 852:	80 e1       	ldi	r24, 0x10	; 16
 854:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(C1,std_high);
 858:	61 e0       	ldi	r22, 0x01	; 1
 85a:	81 e1       	ldi	r24, 0x11	; 17
 85c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(C2,std_high);
 860:	61 e0       	ldi	r22, 0x01	; 1
 862:	82 e1       	ldi	r24, 0x12	; 18
 864:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(C3,std_high);
 868:	61 e0       	ldi	r22, 0x01	; 1
 86a:	83 e1       	ldi	r24, 0x13	; 19
 86c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
 870:	08 95       	ret

00000872 <CheckR0>:
	
}
long CheckR0()
{   
	long chckr0=0;
	write(R3,std_high);
 872:	61 e0       	ldi	r22, 0x01	; 1
 874:	87 e1       	ldi	r24, 0x17	; 23
 876:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R0,std_low);
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	84 e1       	ldi	r24, 0x14	; 20
 87e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R1,std_high);
 882:	61 e0       	ldi	r22, 0x01	; 1
 884:	85 e1       	ldi	r24, 0x15	; 21
 886:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R2,std_high);
 88a:	61 e0       	ldi	r22, 0x01	; 1
 88c:	86 e1       	ldi	r24, 0x16	; 22
 88e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	
	if ((read (C0)==std_low))
 892:	80 e1       	ldi	r24, 0x10	; 16
 894:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 898:	81 11       	cpse	r24, r1
 89a:	0d c0       	rjmp	.+26     	; 0x8b6 <CheckR0+0x44>
	{
		LCD_SendChar('7');
 89c:	87 e3       	ldi	r24, 0x37	; 55
 89e:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr0=7;
		while((read (C0))==std_low);
 8a2:	80 e1       	ldi	r24, 0x10	; 16
 8a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 8a8:	88 23       	and	r24, r24
 8aa:	d9 f3       	breq	.-10     	; 0x8a2 <CheckR0+0x30>
	write(R2,std_high);
	
	if ((read (C0)==std_low))
	{
		LCD_SendChar('7');
		chckr0=7;
 8ac:	67 e0       	ldi	r22, 0x07	; 7
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	08 95       	ret
		while((read (C0))==std_low);
		
	}
	else if ((read (C1)==std_low))
 8b6:	81 e1       	ldi	r24, 0x11	; 17
 8b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 8bc:	81 11       	cpse	r24, r1
 8be:	0d c0       	rjmp	.+26     	; 0x8da <CheckR0+0x68>
	{
		LCD_SendChar('8');
 8c0:	88 e3       	ldi	r24, 0x38	; 56
 8c2:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr0=8;
		while((read (C1))==std_low);
 8c6:	81 e1       	ldi	r24, 0x11	; 17
 8c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 8cc:	88 23       	and	r24, r24
 8ce:	d9 f3       	breq	.-10     	; 0x8c6 <CheckR0+0x54>
		
	}
	else if ((read (C1)==std_low))
	{
		LCD_SendChar('8');
		chckr0=8;
 8d0:	68 e0       	ldi	r22, 0x08	; 8
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	08 95       	ret
		while((read (C1))==std_low);
		
	}
else if ((read (C2)==std_low))
 8da:	82 e1       	ldi	r24, 0x12	; 18
 8dc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 8e0:	81 11       	cpse	r24, r1
 8e2:	0d c0       	rjmp	.+26     	; 0x8fe <CheckR0+0x8c>
	{
		LCD_SendChar('9');
 8e4:	89 e3       	ldi	r24, 0x39	; 57
 8e6:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr0=9;
		while((read (C2))==std_low);
 8ea:	82 e1       	ldi	r24, 0x12	; 18
 8ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 8f0:	88 23       	and	r24, r24
 8f2:	d9 f3       	breq	.-10     	; 0x8ea <CheckR0+0x78>
		
	}
else if ((read (C2)==std_low))
	{
		LCD_SendChar('9');
		chckr0=9;
 8f4:	69 e0       	ldi	r22, 0x09	; 9
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	08 95       	ret
		while((read (C2))==std_low);
		
	}
else if ((read (C3)==std_low))
 8fe:	83 e1       	ldi	r24, 0x13	; 19
 900:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 904:	81 11       	cpse	r24, r1
 906:	0d c0       	rjmp	.+26     	; 0x922 <CheckR0+0xb0>
	{
		LCD_SendChar('/');
 908:	8f e2       	ldi	r24, 0x2F	; 47
 90a:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr0=10;
		while((read (C3))==std_low);
 90e:	83 e1       	ldi	r24, 0x13	; 19
 910:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 914:	88 23       	and	r24, r24
 916:	d9 f3       	breq	.-10     	; 0x90e <CheckR0+0x9c>
		
	}
else if ((read (C3)==std_low))
	{
		LCD_SendChar('/');
		chckr0=10;
 918:	6a e0       	ldi	r22, 0x0A	; 10
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	08 95       	ret
		while((read (C3))==std_low);
		
	}
	else{
	chckr0=0;
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	70 e0       	ldi	r23, 0x00	; 0
 926:	cb 01       	movw	r24, r22
	
	};
	return chckr0;
	}
 928:	08 95       	ret

0000092a <CheckR1>:
long CheckR1()
{
	long chckr1=0;
	write(R0,std_high);
 92a:	61 e0       	ldi	r22, 0x01	; 1
 92c:	84 e1       	ldi	r24, 0x14	; 20
 92e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R1,std_low);
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	85 e1       	ldi	r24, 0x15	; 21
 936:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R2,std_high);
 93a:	61 e0       	ldi	r22, 0x01	; 1
 93c:	86 e1       	ldi	r24, 0x16	; 22
 93e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
    write(R3,std_high);
 942:	61 e0       	ldi	r22, 0x01	; 1
 944:	87 e1       	ldi	r24, 0x17	; 23
 946:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	if ((read (C0)==std_low))
 94a:	80 e1       	ldi	r24, 0x10	; 16
 94c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 950:	81 11       	cpse	r24, r1
 952:	0d c0       	rjmp	.+26     	; 0x96e <CheckR1+0x44>
	{
		LCD_SendChar('4');
 954:	84 e3       	ldi	r24, 0x34	; 52
 956:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr1=4;
		while((read (C0))==std_low);
 95a:	80 e1       	ldi	r24, 0x10	; 16
 95c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 960:	88 23       	and	r24, r24
 962:	d9 f3       	breq	.-10     	; 0x95a <CheckR1+0x30>
	write(R2,std_high);
    write(R3,std_high);
	if ((read (C0)==std_low))
	{
		LCD_SendChar('4');
		chckr1=4;
 964:	64 e0       	ldi	r22, 0x04	; 4
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	08 95       	ret
		while((read (C0))==std_low);
	}
	else if ((read (C1)==std_low))
 96e:	81 e1       	ldi	r24, 0x11	; 17
 970:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 974:	81 11       	cpse	r24, r1
 976:	0d c0       	rjmp	.+26     	; 0x992 <CheckR1+0x68>
	{
		LCD_SendChar('5');
 978:	85 e3       	ldi	r24, 0x35	; 53
 97a:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr1=5;
		while((read (C1))==std_low);
 97e:	81 e1       	ldi	r24, 0x11	; 17
 980:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 984:	88 23       	and	r24, r24
 986:	d9 f3       	breq	.-10     	; 0x97e <CheckR1+0x54>
		while((read (C0))==std_low);
	}
	else if ((read (C1)==std_low))
	{
		LCD_SendChar('5');
		chckr1=5;
 988:	65 e0       	ldi	r22, 0x05	; 5
 98a:	70 e0       	ldi	r23, 0x00	; 0
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	08 95       	ret
		while((read (C1))==std_low);
	}
	else if ((read (C2)==std_low))
 992:	82 e1       	ldi	r24, 0x12	; 18
 994:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 998:	81 11       	cpse	r24, r1
 99a:	0d c0       	rjmp	.+26     	; 0x9b6 <CheckR1+0x8c>
	{
		LCD_SendChar('6');
 99c:	86 e3       	ldi	r24, 0x36	; 54
 99e:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr1=6;
		while((read (C2))==std_low);
 9a2:	82 e1       	ldi	r24, 0x12	; 18
 9a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 9a8:	88 23       	and	r24, r24
 9aa:	d9 f3       	breq	.-10     	; 0x9a2 <CheckR1+0x78>
		while((read (C1))==std_low);
	}
	else if ((read (C2)==std_low))
	{
		LCD_SendChar('6');
		chckr1=6;
 9ac:	66 e0       	ldi	r22, 0x06	; 6
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	08 95       	ret
		while((read (C2))==std_low);
	}
else if ((read (C3)==std_low))
 9b6:	83 e1       	ldi	r24, 0x13	; 19
 9b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 9bc:	81 11       	cpse	r24, r1
 9be:	0d c0       	rjmp	.+26     	; 0x9da <CheckR1+0xb0>
	{
		LCD_SendChar('*');
 9c0:	8a e2       	ldi	r24, 0x2A	; 42
 9c2:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr1=11;
		while((read (C3))==std_low);
 9c6:	83 e1       	ldi	r24, 0x13	; 19
 9c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 9cc:	88 23       	and	r24, r24
 9ce:	d9 f3       	breq	.-10     	; 0x9c6 <CheckR1+0x9c>
		while((read (C2))==std_low);
	}
else if ((read (C3)==std_low))
	{
		LCD_SendChar('*');
		chckr1=11;
 9d0:	6b e0       	ldi	r22, 0x0B	; 11
 9d2:	70 e0       	ldi	r23, 0x00	; 0
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	08 95       	ret
		while((read (C3))==std_low);
	}
	else{
		chckr1=0;
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	70 e0       	ldi	r23, 0x00	; 0
 9de:	cb 01       	movw	r24, r22
	};
	return chckr1;
}
 9e0:	08 95       	ret

000009e2 <CheckR2>:
long CheckR2()
{
	long chckr2=0;
	write(R0,std_high);
 9e2:	61 e0       	ldi	r22, 0x01	; 1
 9e4:	84 e1       	ldi	r24, 0x14	; 20
 9e6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R1,std_high);
 9ea:	61 e0       	ldi	r22, 0x01	; 1
 9ec:	85 e1       	ldi	r24, 0x15	; 21
 9ee:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R2,std_low);
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	86 e1       	ldi	r24, 0x16	; 22
 9f6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R3,std_high);
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	87 e1       	ldi	r24, 0x17	; 23
 9fe:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	if ((read (C0)==std_low))
 a02:	80 e1       	ldi	r24, 0x10	; 16
 a04:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 a08:	81 11       	cpse	r24, r1
 a0a:	0d c0       	rjmp	.+26     	; 0xa26 <CheckR2+0x44>
	{
		LCD_SendChar('1');
 a0c:	81 e3       	ldi	r24, 0x31	; 49
 a0e:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr2=1;
		while((read (C0))==std_low);
 a12:	80 e1       	ldi	r24, 0x10	; 16
 a14:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 a18:	88 23       	and	r24, r24
 a1a:	d9 f3       	breq	.-10     	; 0xa12 <CheckR2+0x30>
	write(R2,std_low);
	write(R3,std_high);
	if ((read (C0)==std_low))
	{
		LCD_SendChar('1');
		chckr2=1;
 a1c:	61 e0       	ldi	r22, 0x01	; 1
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	08 95       	ret
		while((read (C0))==std_low);
		
	}
	else if ((read (C1)==std_low))
 a26:	81 e1       	ldi	r24, 0x11	; 17
 a28:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 a2c:	81 11       	cpse	r24, r1
 a2e:	0d c0       	rjmp	.+26     	; 0xa4a <CheckR2+0x68>
	{
		LCD_SendChar('2');
 a30:	82 e3       	ldi	r24, 0x32	; 50
 a32:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr2=2;
		while((read (C1))==std_low);
 a36:	81 e1       	ldi	r24, 0x11	; 17
 a38:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 a3c:	88 23       	and	r24, r24
 a3e:	d9 f3       	breq	.-10     	; 0xa36 <CheckR2+0x54>
		
	}
	else if ((read (C1)==std_low))
	{
		LCD_SendChar('2');
		chckr2=2;
 a40:	62 e0       	ldi	r22, 0x02	; 2
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	80 e0       	ldi	r24, 0x00	; 0
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	08 95       	ret
		while((read (C1))==std_low);
	}
else if ((read (C2)==std_low))
 a4a:	82 e1       	ldi	r24, 0x12	; 18
 a4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 a50:	81 11       	cpse	r24, r1
 a52:	0d c0       	rjmp	.+26     	; 0xa6e <CheckR2+0x8c>
	{
		LCD_SendChar('3');
 a54:	83 e3       	ldi	r24, 0x33	; 51
 a56:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr2=3;
		while((read (C2))==std_low);
 a5a:	82 e1       	ldi	r24, 0x12	; 18
 a5c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 a60:	88 23       	and	r24, r24
 a62:	d9 f3       	breq	.-10     	; 0xa5a <CheckR2+0x78>
		while((read (C1))==std_low);
	}
else if ((read (C2)==std_low))
	{
		LCD_SendChar('3');
		chckr2=3;
 a64:	63 e0       	ldi	r22, 0x03	; 3
 a66:	70 e0       	ldi	r23, 0x00	; 0
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	08 95       	ret
		while((read (C2))==std_low);
	}
else if ((read (C3)==std_low))
 a6e:	83 e1       	ldi	r24, 0x13	; 19
 a70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 a74:	81 11       	cpse	r24, r1
 a76:	0d c0       	rjmp	.+26     	; 0xa92 <CheckR2+0xb0>
	{
		
		LCD_SendChar('-');
 a78:	8d e2       	ldi	r24, 0x2D	; 45
 a7a:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr2=12;
		while((read (C3))==std_low);
 a7e:	83 e1       	ldi	r24, 0x13	; 19
 a80:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 a84:	88 23       	and	r24, r24
 a86:	d9 f3       	breq	.-10     	; 0xa7e <CheckR2+0x9c>
	}
else if ((read (C3)==std_low))
	{
		
		LCD_SendChar('-');
		chckr2=12;
 a88:	6c e0       	ldi	r22, 0x0C	; 12
 a8a:	70 e0       	ldi	r23, 0x00	; 0
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	08 95       	ret
		while((read (C3))==std_low);
	}
		else{
			chckr2=0;
 a92:	60 e0       	ldi	r22, 0x00	; 0
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	cb 01       	movw	r24, r22
			
		};
		return chckr2;
	
}
 a98:	08 95       	ret

00000a9a <CheckR3>:
long CheckR3()
{
long chckr3=0;
	write(R0,std_high);
 a9a:	61 e0       	ldi	r22, 0x01	; 1
 a9c:	84 e1       	ldi	r24, 0x14	; 20
 a9e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R1,std_high);
 aa2:	61 e0       	ldi	r22, 0x01	; 1
 aa4:	85 e1       	ldi	r24, 0x15	; 21
 aa6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R2,std_high);
 aaa:	61 e0       	ldi	r22, 0x01	; 1
 aac:	86 e1       	ldi	r24, 0x16	; 22
 aae:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(R3,std_low);
 ab2:	60 e0       	ldi	r22, 0x00	; 0
 ab4:	87 e1       	ldi	r24, 0x17	; 23
 ab6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	if ((read (C0)==std_low))
 aba:	80 e1       	ldi	r24, 0x10	; 16
 abc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 ac0:	81 11       	cpse	r24, r1
 ac2:	0d c0       	rjmp	.+26     	; 0xade <CheckR3+0x44>
	{
		LCD_Cmd(0x01);
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Cmd>
	//	LCD_SendChar('0');
		chckr3=15;
		while((read (C0))==std_low);
 aca:	80 e1       	ldi	r24, 0x10	; 16
 acc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 ad0:	88 23       	and	r24, r24
 ad2:	d9 f3       	breq	.-10     	; 0xaca <CheckR3+0x30>
	write(R3,std_low);
	if ((read (C0)==std_low))
	{
		LCD_Cmd(0x01);
	//	LCD_SendChar('0');
		chckr3=15;
 ad4:	6f e0       	ldi	r22, 0x0F	; 15
 ad6:	70 e0       	ldi	r23, 0x00	; 0
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	08 95       	ret
		while((read (C0))==std_low);
	}
	else if ((read (C1)==std_low))
 ade:	81 e1       	ldi	r24, 0x11	; 17
 ae0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 ae4:	81 11       	cpse	r24, r1
 ae6:	0f c0       	rjmp	.+30     	; 0xb06 <CheckR3+0x6c>
	{
		LCD_SendChar('0');
 ae8:	80 e3       	ldi	r24, 0x30	; 48
 aea:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr3=0;
		ZER0=1;
 aee:	81 e0       	ldi	r24, 0x01	; 1
 af0:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <ZER0>
		while((read (C1))==std_low);
 af4:	81 e1       	ldi	r24, 0x11	; 17
 af6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 afa:	88 23       	and	r24, r24
 afc:	d9 f3       	breq	.-10     	; 0xaf4 <CheckR3+0x5a>
		while((read (C0))==std_low);
	}
	else if ((read (C1)==std_low))
	{
		LCD_SendChar('0');
		chckr3=0;
 afe:	60 e0       	ldi	r22, 0x00	; 0
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	cb 01       	movw	r24, r22
 b04:	08 95       	ret
		ZER0=1;
		while((read (C1))==std_low);
	}
	else if ((read (C2)==std_low))
 b06:	82 e1       	ldi	r24, 0x12	; 18
 b08:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 b0c:	81 11       	cpse	r24, r1
 b0e:	19 c0       	rjmp	.+50     	; 0xb42 <CheckR3+0xa8>
	{
		LCD_SendChar('=');
 b10:	8d e3       	ldi	r24, 0x3D	; 61
 b12:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b16:	2f ef       	ldi	r18, 0xFF	; 255
 b18:	89 ef       	ldi	r24, 0xF9	; 249
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	21 50       	subi	r18, 0x01	; 1
 b1e:	80 40       	sbci	r24, 0x00	; 0
 b20:	90 40       	sbci	r25, 0x00	; 0
 b22:	e1 f7       	brne	.-8      	; 0xb1c <CheckR3+0x82>
 b24:	00 c0       	rjmp	.+0      	; 0xb26 <CheckR3+0x8c>
 b26:	00 00       	nop
		_delay_ms(20);
		LCD_Cmd(0x01);
 b28:	81 e0       	ldi	r24, 0x01	; 1
 b2a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Cmd>
		chckr3=14;
		while((read (C2))==std_low);
 b2e:	82 e1       	ldi	r24, 0x12	; 18
 b30:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 b34:	88 23       	and	r24, r24
 b36:	d9 f3       	breq	.-10     	; 0xb2e <CheckR3+0x94>
	else if ((read (C2)==std_low))
	{
		LCD_SendChar('=');
		_delay_ms(20);
		LCD_Cmd(0x01);
		chckr3=14;
 b38:	6e e0       	ldi	r22, 0x0E	; 14
 b3a:	70 e0       	ldi	r23, 0x00	; 0
 b3c:	80 e0       	ldi	r24, 0x00	; 0
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	08 95       	ret
		while((read (C2))==std_low);
	}
	else if ((read (C3)==std_low))
 b42:	83 e1       	ldi	r24, 0x13	; 19
 b44:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 b48:	81 11       	cpse	r24, r1
 b4a:	0d c0       	rjmp	.+26     	; 0xb66 <CheckR3+0xcc>
	{
		LCD_SendChar('+');
 b4c:	8b e2       	ldi	r24, 0x2B	; 43
 b4e:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		chckr3=13;
		while((read (C3))==std_low);
 b52:	83 e1       	ldi	r24, 0x13	; 19
 b54:	0e 94 f5 03 	call	0x7ea	; 0x7ea <read>
 b58:	88 23       	and	r24, r24
 b5a:	d9 f3       	breq	.-10     	; 0xb52 <CheckR3+0xb8>
		while((read (C2))==std_low);
	}
	else if ((read (C3)==std_low))
	{
		LCD_SendChar('+');
		chckr3=13;
 b5c:	6d e0       	ldi	r22, 0x0D	; 13
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	80 e0       	ldi	r24, 0x00	; 0
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	08 95       	ret
		while((read (C3))==std_low);
	}
	else
	{
		chckr3=0;
 b66:	60 e0       	ldi	r22, 0x00	; 0
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	cb 01       	movw	r24, r22
	}
	return chckr3;
	
 b6c:	08 95       	ret

00000b6e <LCD_Cmd>:
	LCD_Cmd(0x01);
	_delay_ms(2);
	
}
void LCD_Cmd(UINT8 Cmd)
{
 b6e:	cf 93       	push	r28
 b70:	c8 2f       	mov	r28, r24
	LCD_DATAPORT= (LCD_DATAPORT &=(0x0F))|(Cmd &(0xF0));
 b72:	8b b3       	in	r24, 0x1b	; 27
 b74:	8f 70       	andi	r24, 0x0F	; 15
 b76:	8b bb       	out	0x1b, r24	; 27
 b78:	9c 2f       	mov	r25, r28
 b7a:	90 7f       	andi	r25, 0xF0	; 240
 b7c:	89 2b       	or	r24, r25
 b7e:	8b bb       	out	0x1b, r24	; 27
	write(RS,std_low);
 b80:	60 e0       	ldi	r22, 0x00	; 0
 b82:	89 e0       	ldi	r24, 0x09	; 9
 b84:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(E,std_low);
 b88:	60 e0       	ldi	r22, 0x00	; 0
 b8a:	8b e0       	ldi	r24, 0x0B	; 11
 b8c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b90:	8f e8       	ldi	r24, 0x8F	; 143
 b92:	91 e0       	ldi	r25, 0x01	; 1
 b94:	01 97       	sbiw	r24, 0x01	; 1
 b96:	f1 f7       	brne	.-4      	; 0xb94 <LCD_Cmd+0x26>
 b98:	00 c0       	rjmp	.+0      	; 0xb9a <LCD_Cmd+0x2c>
 b9a:	00 00       	nop
	_delay_us(100);
	write(E,std_high);
 b9c:	61 e0       	ldi	r22, 0x01	; 1
 b9e:	8b e0       	ldi	r24, 0x0B	; 11
 ba0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ba4:	8f e1       	ldi	r24, 0x1F	; 31
 ba6:	9e e4       	ldi	r25, 0x4E	; 78
 ba8:	01 97       	sbiw	r24, 0x01	; 1
 baa:	f1 f7       	brne	.-4      	; 0xba8 <LCD_Cmd+0x3a>
 bac:	00 c0       	rjmp	.+0      	; 0xbae <LCD_Cmd+0x40>
 bae:	00 00       	nop
	_delay_ms(5);
LCD_DATAPORT= (LCD_DATAPORT &=(0x0F))|(Cmd<<4);
 bb0:	8b b3       	in	r24, 0x1b	; 27
 bb2:	28 2f       	mov	r18, r24
 bb4:	2f 70       	andi	r18, 0x0F	; 15
 bb6:	2b bb       	out	0x1b, r18	; 27
 bb8:	30 e1       	ldi	r19, 0x10	; 16
 bba:	c3 9f       	mul	r28, r19
 bbc:	c0 01       	movw	r24, r0
 bbe:	11 24       	eor	r1, r1
 bc0:	82 2b       	or	r24, r18
 bc2:	8b bb       	out	0x1b, r24	; 27
	
	write(RS,std_low);
 bc4:	60 e0       	ldi	r22, 0x00	; 0
 bc6:	89 e0       	ldi	r24, 0x09	; 9
 bc8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(E,std_low);
 bcc:	60 e0       	ldi	r22, 0x00	; 0
 bce:	8b e0       	ldi	r24, 0x0B	; 11
 bd0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bd4:	8f e8       	ldi	r24, 0x8F	; 143
 bd6:	91 e0       	ldi	r25, 0x01	; 1
 bd8:	01 97       	sbiw	r24, 0x01	; 1
 bda:	f1 f7       	brne	.-4      	; 0xbd8 <LCD_Cmd+0x6a>
 bdc:	00 c0       	rjmp	.+0      	; 0xbde <LCD_Cmd+0x70>
 bde:	00 00       	nop
	_delay_us(100);
	write(E,std_high);
 be0:	61 e0       	ldi	r22, 0x01	; 1
 be2:	8b e0       	ldi	r24, 0x0B	; 11
 be4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	//_delay_ms(2);//i can neglet it here
	
	
	
}
 be8:	cf 91       	pop	r28
 bea:	08 95       	ret

00000bec <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bec:	2f ef       	ldi	r18, 0xFF	; 255
 bee:	89 ef       	ldi	r24, 0xF9	; 249
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	21 50       	subi	r18, 0x01	; 1
 bf4:	80 40       	sbci	r24, 0x00	; 0
 bf6:	90 40       	sbci	r25, 0x00	; 0
 bf8:	e1 f7       	brne	.-8      	; 0xbf2 <LCD_init+0x6>
 bfa:	00 c0       	rjmp	.+0      	; 0xbfc <LCD_init+0x10>
 bfc:	00 00       	nop


void LCD_init(void)
{
	_delay_ms(20);
	write(RW,std_low);
 bfe:	60 e0       	ldi	r22, 0x00	; 0
 c00:	8a e0       	ldi	r24, 0x0A	; 10
 c02:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	LCD_Cmd(0x33);
 c06:	83 e3       	ldi	r24, 0x33	; 51
 c08:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c0c:	87 e5       	ldi	r24, 0x57	; 87
 c0e:	92 e0       	ldi	r25, 0x02	; 2
 c10:	01 97       	sbiw	r24, 0x01	; 1
 c12:	f1 f7       	brne	.-4      	; 0xc10 <LCD_init+0x24>
 c14:	00 c0       	rjmp	.+0      	; 0xc16 <LCD_init+0x2a>
 c16:	00 00       	nop
	_delay_us(150);
	LCD_Cmd(0x32);
 c18:	82 e3       	ldi	r24, 0x32	; 50
 c1a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Cmd>
	LCD_Cmd(0x28);
 c1e:	88 e2       	ldi	r24, 0x28	; 40
 c20:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Cmd>
	LCD_Cmd(0x06);
 c24:	86 e0       	ldi	r24, 0x06	; 6
 c26:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Cmd>
	LCD_Cmd(0x0C);
 c2a:	8c e0       	ldi	r24, 0x0C	; 12
 c2c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Cmd>
	LCD_Cmd(0x01);
 c30:	81 e0       	ldi	r24, 0x01	; 1
 c32:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCD_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c36:	8f e3       	ldi	r24, 0x3F	; 63
 c38:	9f e1       	ldi	r25, 0x1F	; 31
 c3a:	01 97       	sbiw	r24, 0x01	; 1
 c3c:	f1 f7       	brne	.-4      	; 0xc3a <LCD_init+0x4e>
 c3e:	00 c0       	rjmp	.+0      	; 0xc40 <LCD_init+0x54>
 c40:	00 00       	nop
 c42:	08 95       	ret

00000c44 <LCD_SendChar>:
	
	
	
}
void LCD_SendChar(char  data)
{
 c44:	cf 93       	push	r28
 c46:	c8 2f       	mov	r28, r24
	LCD_DATAPORT= (LCD_DATAPORT &=(0x0F))|(data &(0xF0));
 c48:	8b b3       	in	r24, 0x1b	; 27
 c4a:	8f 70       	andi	r24, 0x0F	; 15
 c4c:	8b bb       	out	0x1b, r24	; 27
 c4e:	9c 2f       	mov	r25, r28
 c50:	90 7f       	andi	r25, 0xF0	; 240
 c52:	89 2b       	or	r24, r25
 c54:	8b bb       	out	0x1b, r24	; 27
	write(RS,std_high);
 c56:	61 e0       	ldi	r22, 0x01	; 1
 c58:	89 e0       	ldi	r24, 0x09	; 9
 c5a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	write(E,std_low);
 c5e:	60 e0       	ldi	r22, 0x00	; 0
 c60:	8b e0       	ldi	r24, 0x0B	; 11
 c62:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c66:	8f e8       	ldi	r24, 0x8F	; 143
 c68:	91 e0       	ldi	r25, 0x01	; 1
 c6a:	01 97       	sbiw	r24, 0x01	; 1
 c6c:	f1 f7       	brne	.-4      	; 0xc6a <LCD_SendChar+0x26>
 c6e:	00 c0       	rjmp	.+0      	; 0xc70 <LCD_SendChar+0x2c>
 c70:	00 00       	nop
	_delay_us(100);
	write(E,std_high);
 c72:	61 e0       	ldi	r22, 0x01	; 1
 c74:	8b e0       	ldi	r24, 0x0B	; 11
 c76:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c7a:	8f e3       	ldi	r24, 0x3F	; 63
 c7c:	9f e1       	ldi	r25, 0x1F	; 31
 c7e:	01 97       	sbiw	r24, 0x01	; 1
 c80:	f1 f7       	brne	.-4      	; 0xc7e <LCD_SendChar+0x3a>
 c82:	00 c0       	rjmp	.+0      	; 0xc84 <LCD_SendChar+0x40>
 c84:	00 00       	nop
	_delay_ms(2);
	LCD_DATAPORT= (LCD_DATAPORT &=(0x0F))|(data<<4);
 c86:	8b b3       	in	r24, 0x1b	; 27
 c88:	28 2f       	mov	r18, r24
 c8a:	2f 70       	andi	r18, 0x0F	; 15
 c8c:	2b bb       	out	0x1b, r18	; 27
 c8e:	30 e1       	ldi	r19, 0x10	; 16
 c90:	c3 9f       	mul	r28, r19
 c92:	c0 01       	movw	r24, r0
 c94:	11 24       	eor	r1, r1
 c96:	82 2b       	or	r24, r18
 c98:	8b bb       	out	0x1b, r24	; 27
	write(E,std_low);
 c9a:	60 e0       	ldi	r22, 0x00	; 0
 c9c:	8b e0       	ldi	r24, 0x0B	; 11
 c9e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ca2:	8f e8       	ldi	r24, 0x8F	; 143
 ca4:	91 e0       	ldi	r25, 0x01	; 1
 ca6:	01 97       	sbiw	r24, 0x01	; 1
 ca8:	f1 f7       	brne	.-4      	; 0xca6 <LCD_SendChar+0x62>
 caa:	00 c0       	rjmp	.+0      	; 0xcac <LCD_SendChar+0x68>
 cac:	00 00       	nop
	_delay_us(100);
	write(E,std_high);
 cae:	61 e0       	ldi	r22, 0x01	; 1
 cb0:	8b e0       	ldi	r24, 0x0B	; 11
 cb2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 cb6:	8f e3       	ldi	r24, 0x3F	; 63
 cb8:	9f e1       	ldi	r25, 0x1F	; 31
 cba:	01 97       	sbiw	r24, 0x01	; 1
 cbc:	f1 f7       	brne	.-4      	; 0xcba <LCD_SendChar+0x76>
 cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <LCD_SendChar+0x7c>
 cc0:	00 00       	nop
	_delay_ms(2);
	
}
 cc2:	cf 91       	pop	r28
 cc4:	08 95       	ret

00000cc6 <LCD_SendString>:
void LCD_SendString(char * string)
{
 cc6:	0f 93       	push	r16
 cc8:	1f 93       	push	r17
 cca:	cf 93       	push	r28
 ccc:	fc 01       	movw	r30, r24
	
	UINT8 i=0;
	while(string[i]!='\0')
 cce:	80 81       	ld	r24, Z
 cd0:	88 23       	and	r24, r24
 cd2:	59 f0       	breq	.+22     	; 0xcea <LCD_SendString+0x24>
 cd4:	8f 01       	movw	r16, r30
 cd6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_SendChar(string[i]);
 cd8:	0e 94 22 06 	call	0xc44	; 0xc44 <LCD_SendChar>
		i++;
 cdc:	cf 5f       	subi	r28, 0xFF	; 255
}
void LCD_SendString(char * string)
{
	
	UINT8 i=0;
	while(string[i]!='\0')
 cde:	f8 01       	movw	r30, r16
 ce0:	ec 0f       	add	r30, r28
 ce2:	f1 1d       	adc	r31, r1
 ce4:	80 81       	ld	r24, Z
 ce6:	81 11       	cpse	r24, r1
 ce8:	f7 cf       	rjmp	.-18     	; 0xcd8 <LCD_SendString+0x12>
	{
		LCD_SendChar(string[i]);
		i++;
		
	};
}
 cea:	cf 91       	pop	r28
 cec:	1f 91       	pop	r17
 cee:	0f 91       	pop	r16
 cf0:	08 95       	ret

00000cf2 <main>:
#include "calculator.h"


int main(void)
{
	DIO_INI();
 cf2:	0e 94 82 06 	call	0xd04	; 0xd04 <DIO_INI>
	LCD_init();
 cf6:	0e 94 f6 05 	call	0xbec	; 0xbec <LCD_init>
	 keypad_ini();
 cfa:	0e 94 28 04 	call	0x850	; 0x850 <keypad_ini>
	
  
    while (1) 
    {
		
		summation();
 cfe:	0e 94 3c 02 	call	0x478	; 0x478 <summation>
 d02:	fd cf       	rjmp	.-6      	; 0xcfe <main+0xc>

00000d04 <DIO_INI>:
	{output,std_high},
	{output,std_high},
	{output,std_high}
};

void DIO_INI(){
 d04:	e0 e6       	ldi	r30, 0x60	; 96
 d06:	f0 e0       	ldi	r31, 0x00	; 0
	UINT8 COUNT=0;
	Dio_portstypes   portx;
	Dio_channelstypes channelpos;
	for (COUNT=0;COUNT<dio_count;COUNT++)
 d08:	80 e0       	ldi	r24, 0x00	; 0
			{
				setbit(DDRB_reg,channelpos);
			}
			else
			{
				clearbit(DDRB_reg,channelpos);
 d0a:	41 e0       	ldi	r20, 0x01	; 1
 d0c:	50 e0       	ldi	r21, 0x00	; 0
	UINT8 COUNT=0;
	Dio_portstypes   portx;
	Dio_channelstypes channelpos;
	for (COUNT=0;COUNT<dio_count;COUNT++)
	{
		channelpos= COUNT%8;
 d0e:	28 2f       	mov	r18, r24
 d10:	27 70       	andi	r18, 0x07	; 7
		portx=COUNT/8;
		switch (portx){
 d12:	98 2f       	mov	r25, r24
 d14:	96 95       	lsr	r25
 d16:	96 95       	lsr	r25
 d18:	96 95       	lsr	r25
 d1a:	91 30       	cpi	r25, 0x01	; 1
 d1c:	09 f1       	breq	.+66     	; 0xd60 <DIO_INI+0x5c>
 d1e:	30 f0       	brcs	.+12     	; 0xd2c <DIO_INI+0x28>
 d20:	92 30       	cpi	r25, 0x02	; 2
 d22:	c1 f1       	breq	.+112    	; 0xd94 <DIO_INI+0x90>
 d24:	93 30       	cpi	r25, 0x03	; 3
 d26:	09 f4       	brne	.+2      	; 0xd2a <DIO_INI+0x26>
 d28:	4f c0       	rjmp	.+158    	; 0xdc8 <DIO_INI+0xc4>
 d2a:	67 c0       	rjmp	.+206    	; 0xdfa <DIO_INI+0xf6>
			case DIO_PORTA:
			if (Pincfg[COUNT].pindir==output)
 d2c:	90 81       	ld	r25, Z
 d2e:	91 30       	cpi	r25, 0x01	; 1
 d30:	59 f4       	brne	.+22     	; 0xd48 <DIO_INI+0x44>
			{
				setbit(DDRA_reg,channelpos);
 d32:	9a b3       	in	r25, 0x1a	; 26
 d34:	ba 01       	movw	r22, r20
 d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_INI+0x38>
 d38:	66 0f       	add	r22, r22
 d3a:	77 1f       	adc	r23, r23
 d3c:	2a 95       	dec	r18
 d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_INI+0x34>
 d40:	9b 01       	movw	r18, r22
 d42:	29 2b       	or	r18, r25
 d44:	2a bb       	out	0x1a, r18	; 26
 d46:	59 c0       	rjmp	.+178    	; 0xdfa <DIO_INI+0xf6>
			} 
			else
			{
				clearbit(DDRA_reg,channelpos);
 d48:	3a b3       	in	r19, 0x1a	; 26
 d4a:	ba 01       	movw	r22, r20
 d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_INI+0x4e>
 d4e:	66 0f       	add	r22, r22
 d50:	77 1f       	adc	r23, r23
 d52:	2a 95       	dec	r18
 d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_INI+0x4a>
 d56:	96 2f       	mov	r25, r22
 d58:	90 95       	com	r25
 d5a:	93 23       	and	r25, r19
 d5c:	9a bb       	out	0x1a, r25	; 26
 d5e:	4d c0       	rjmp	.+154    	; 0xdfa <DIO_INI+0xf6>
			}
			
			break;
			case DIO_PORTB:
			if (Pincfg[COUNT].pindir==output)
 d60:	90 81       	ld	r25, Z
 d62:	91 30       	cpi	r25, 0x01	; 1
 d64:	59 f4       	brne	.+22     	; 0xd7c <DIO_INI+0x78>
			{
				setbit(DDRB_reg,channelpos);
 d66:	97 b3       	in	r25, 0x17	; 23
 d68:	ba 01       	movw	r22, r20
 d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_INI+0x6c>
 d6c:	66 0f       	add	r22, r22
 d6e:	77 1f       	adc	r23, r23
 d70:	2a 95       	dec	r18
 d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_INI+0x68>
 d74:	9b 01       	movw	r18, r22
 d76:	29 2b       	or	r18, r25
 d78:	27 bb       	out	0x17, r18	; 23
 d7a:	3f c0       	rjmp	.+126    	; 0xdfa <DIO_INI+0xf6>
			}
			else
			{
				clearbit(DDRB_reg,channelpos);
 d7c:	37 b3       	in	r19, 0x17	; 23
 d7e:	ba 01       	movw	r22, r20
 d80:	02 c0       	rjmp	.+4      	; 0xd86 <DIO_INI+0x82>
 d82:	66 0f       	add	r22, r22
 d84:	77 1f       	adc	r23, r23
 d86:	2a 95       	dec	r18
 d88:	e2 f7       	brpl	.-8      	; 0xd82 <DIO_INI+0x7e>
 d8a:	96 2f       	mov	r25, r22
 d8c:	90 95       	com	r25
 d8e:	93 23       	and	r25, r19
 d90:	97 bb       	out	0x17, r25	; 23
 d92:	33 c0       	rjmp	.+102    	; 0xdfa <DIO_INI+0xf6>
			}
			
			break;
			case DIO_PORTC:
			if (Pincfg[COUNT].pindir==output)
 d94:	90 81       	ld	r25, Z
 d96:	91 30       	cpi	r25, 0x01	; 1
 d98:	59 f4       	brne	.+22     	; 0xdb0 <DIO_INI+0xac>
			{
				setbit(DDRC_reg,channelpos);
 d9a:	94 b3       	in	r25, 0x14	; 20
 d9c:	ba 01       	movw	r22, r20
 d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_INI+0xa0>
 da0:	66 0f       	add	r22, r22
 da2:	77 1f       	adc	r23, r23
 da4:	2a 95       	dec	r18
 da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_INI+0x9c>
 da8:	9b 01       	movw	r18, r22
 daa:	29 2b       	or	r18, r25
 dac:	24 bb       	out	0x14, r18	; 20
 dae:	25 c0       	rjmp	.+74     	; 0xdfa <DIO_INI+0xf6>
			}
			else
			{
				clearbit(DDRC_reg,channelpos);
 db0:	34 b3       	in	r19, 0x14	; 20
 db2:	ba 01       	movw	r22, r20
 db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_INI+0xb6>
 db6:	66 0f       	add	r22, r22
 db8:	77 1f       	adc	r23, r23
 dba:	2a 95       	dec	r18
 dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_INI+0xb2>
 dbe:	96 2f       	mov	r25, r22
 dc0:	90 95       	com	r25
 dc2:	93 23       	and	r25, r19
 dc4:	94 bb       	out	0x14, r25	; 20
 dc6:	19 c0       	rjmp	.+50     	; 0xdfa <DIO_INI+0xf6>
			}
			
			break;
			case DIO_PORTD:
			if (Pincfg[COUNT].pindir==output)
 dc8:	90 81       	ld	r25, Z
 dca:	91 30       	cpi	r25, 0x01	; 1
 dcc:	59 f4       	brne	.+22     	; 0xde4 <DIO_INI+0xe0>
			{
				setbit(DDRD_reg,channelpos);
 dce:	91 b3       	in	r25, 0x11	; 17
 dd0:	ba 01       	movw	r22, r20
 dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_INI+0xd4>
 dd4:	66 0f       	add	r22, r22
 dd6:	77 1f       	adc	r23, r23
 dd8:	2a 95       	dec	r18
 dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_INI+0xd0>
 ddc:	9b 01       	movw	r18, r22
 dde:	29 2b       	or	r18, r25
 de0:	21 bb       	out	0x11, r18	; 17
 de2:	0b c0       	rjmp	.+22     	; 0xdfa <DIO_INI+0xf6>
			}
			else
			{
				clearbit(DDRD_reg,channelpos);
 de4:	31 b3       	in	r19, 0x11	; 17
 de6:	ba 01       	movw	r22, r20
 de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_INI+0xea>
 dea:	66 0f       	add	r22, r22
 dec:	77 1f       	adc	r23, r23
 dee:	2a 95       	dec	r18
 df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_INI+0xe6>
 df2:	96 2f       	mov	r25, r22
 df4:	90 95       	com	r25
 df6:	93 23       	and	r25, r19
 df8:	91 bb       	out	0x11, r25	; 17

void DIO_INI(){
	UINT8 COUNT=0;
	Dio_portstypes   portx;
	Dio_channelstypes channelpos;
	for (COUNT=0;COUNT<dio_count;COUNT++)
 dfa:	8f 5f       	subi	r24, 0xFF	; 255
 dfc:	32 96       	adiw	r30, 0x02	; 2
 dfe:	80 32       	cpi	r24, 0x20	; 32
 e00:	09 f0       	breq	.+2      	; 0xe04 <DIO_INI+0x100>
 e02:	85 cf       	rjmp	.-246    	; 0xd0e <DIO_INI+0xa>
			
	};
	
	
	
 e04:	08 95       	ret

00000e06 <__mulsi3>:
 e06:	db 01       	movw	r26, r22
 e08:	8f 93       	push	r24
 e0a:	9f 93       	push	r25
 e0c:	0e 94 32 07 	call	0xe64	; 0xe64 <__muluhisi3>
 e10:	bf 91       	pop	r27
 e12:	af 91       	pop	r26
 e14:	a2 9f       	mul	r26, r18
 e16:	80 0d       	add	r24, r0
 e18:	91 1d       	adc	r25, r1
 e1a:	a3 9f       	mul	r26, r19
 e1c:	90 0d       	add	r25, r0
 e1e:	b2 9f       	mul	r27, r18
 e20:	90 0d       	add	r25, r0
 e22:	11 24       	eor	r1, r1
 e24:	08 95       	ret

00000e26 <__divmodsi4>:
 e26:	05 2e       	mov	r0, r21
 e28:	97 fb       	bst	r25, 7
 e2a:	1e f4       	brtc	.+6      	; 0xe32 <__divmodsi4+0xc>
 e2c:	00 94       	com	r0
 e2e:	0e 94 2a 07 	call	0xe54	; 0xe54 <__negsi2>
 e32:	57 fd       	sbrc	r21, 7
 e34:	07 d0       	rcall	.+14     	; 0xe44 <__divmodsi4_neg2>
 e36:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__udivmodsi4>
 e3a:	07 fc       	sbrc	r0, 7
 e3c:	03 d0       	rcall	.+6      	; 0xe44 <__divmodsi4_neg2>
 e3e:	4e f4       	brtc	.+18     	; 0xe52 <__divmodsi4_exit>
 e40:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__negsi2>

00000e44 <__divmodsi4_neg2>:
 e44:	50 95       	com	r21
 e46:	40 95       	com	r20
 e48:	30 95       	com	r19
 e4a:	21 95       	neg	r18
 e4c:	3f 4f       	sbci	r19, 0xFF	; 255
 e4e:	4f 4f       	sbci	r20, 0xFF	; 255
 e50:	5f 4f       	sbci	r21, 0xFF	; 255

00000e52 <__divmodsi4_exit>:
 e52:	08 95       	ret

00000e54 <__negsi2>:
 e54:	90 95       	com	r25
 e56:	80 95       	com	r24
 e58:	70 95       	com	r23
 e5a:	61 95       	neg	r22
 e5c:	7f 4f       	sbci	r23, 0xFF	; 255
 e5e:	8f 4f       	sbci	r24, 0xFF	; 255
 e60:	9f 4f       	sbci	r25, 0xFF	; 255
 e62:	08 95       	ret

00000e64 <__muluhisi3>:
 e64:	0e 94 5f 07 	call	0xebe	; 0xebe <__umulhisi3>
 e68:	a5 9f       	mul	r26, r21
 e6a:	90 0d       	add	r25, r0
 e6c:	b4 9f       	mul	r27, r20
 e6e:	90 0d       	add	r25, r0
 e70:	a4 9f       	mul	r26, r20
 e72:	80 0d       	add	r24, r0
 e74:	91 1d       	adc	r25, r1
 e76:	11 24       	eor	r1, r1
 e78:	08 95       	ret

00000e7a <__udivmodsi4>:
 e7a:	a1 e2       	ldi	r26, 0x21	; 33
 e7c:	1a 2e       	mov	r1, r26
 e7e:	aa 1b       	sub	r26, r26
 e80:	bb 1b       	sub	r27, r27
 e82:	fd 01       	movw	r30, r26
 e84:	0d c0       	rjmp	.+26     	; 0xea0 <__udivmodsi4_ep>

00000e86 <__udivmodsi4_loop>:
 e86:	aa 1f       	adc	r26, r26
 e88:	bb 1f       	adc	r27, r27
 e8a:	ee 1f       	adc	r30, r30
 e8c:	ff 1f       	adc	r31, r31
 e8e:	a2 17       	cp	r26, r18
 e90:	b3 07       	cpc	r27, r19
 e92:	e4 07       	cpc	r30, r20
 e94:	f5 07       	cpc	r31, r21
 e96:	20 f0       	brcs	.+8      	; 0xea0 <__udivmodsi4_ep>
 e98:	a2 1b       	sub	r26, r18
 e9a:	b3 0b       	sbc	r27, r19
 e9c:	e4 0b       	sbc	r30, r20
 e9e:	f5 0b       	sbc	r31, r21

00000ea0 <__udivmodsi4_ep>:
 ea0:	66 1f       	adc	r22, r22
 ea2:	77 1f       	adc	r23, r23
 ea4:	88 1f       	adc	r24, r24
 ea6:	99 1f       	adc	r25, r25
 ea8:	1a 94       	dec	r1
 eaa:	69 f7       	brne	.-38     	; 0xe86 <__udivmodsi4_loop>
 eac:	60 95       	com	r22
 eae:	70 95       	com	r23
 eb0:	80 95       	com	r24
 eb2:	90 95       	com	r25
 eb4:	9b 01       	movw	r18, r22
 eb6:	ac 01       	movw	r20, r24
 eb8:	bd 01       	movw	r22, r26
 eba:	cf 01       	movw	r24, r30
 ebc:	08 95       	ret

00000ebe <__umulhisi3>:
 ebe:	a2 9f       	mul	r26, r18
 ec0:	b0 01       	movw	r22, r0
 ec2:	b3 9f       	mul	r27, r19
 ec4:	c0 01       	movw	r24, r0
 ec6:	a3 9f       	mul	r26, r19
 ec8:	70 0d       	add	r23, r0
 eca:	81 1d       	adc	r24, r1
 ecc:	11 24       	eor	r1, r1
 ece:	91 1d       	adc	r25, r1
 ed0:	b2 9f       	mul	r27, r18
 ed2:	70 0d       	add	r23, r0
 ed4:	81 1d       	adc	r24, r1
 ed6:	11 24       	eor	r1, r1
 ed8:	91 1d       	adc	r25, r1
 eda:	08 95       	ret

00000edc <__ltoa_ncheck>:
 edc:	bb 27       	eor	r27, r27
 ede:	2a 30       	cpi	r18, 0x0A	; 10
 ee0:	51 f4       	brne	.+20     	; 0xef6 <__ltoa_ncheck+0x1a>
 ee2:	99 23       	and	r25, r25
 ee4:	42 f4       	brpl	.+16     	; 0xef6 <__ltoa_ncheck+0x1a>
 ee6:	bd e2       	ldi	r27, 0x2D	; 45
 ee8:	90 95       	com	r25
 eea:	80 95       	com	r24
 eec:	70 95       	com	r23
 eee:	61 95       	neg	r22
 ef0:	7f 4f       	sbci	r23, 0xFF	; 255
 ef2:	8f 4f       	sbci	r24, 0xFF	; 255
 ef4:	9f 4f       	sbci	r25, 0xFF	; 255
 ef6:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__ultoa_common>

00000efa <__ultoa_ncheck>:
 efa:	bb 27       	eor	r27, r27

00000efc <__ultoa_common>:
 efc:	fa 01       	movw	r30, r20
 efe:	a6 2f       	mov	r26, r22
 f00:	62 17       	cp	r22, r18
 f02:	71 05       	cpc	r23, r1
 f04:	81 05       	cpc	r24, r1
 f06:	91 05       	cpc	r25, r1
 f08:	33 0b       	sbc	r19, r19
 f0a:	30 fb       	bst	r19, 0
 f0c:	66 f0       	brts	.+24     	; 0xf26 <__ultoa_common+0x2a>
 f0e:	aa 27       	eor	r26, r26
 f10:	66 0f       	add	r22, r22
 f12:	77 1f       	adc	r23, r23
 f14:	88 1f       	adc	r24, r24
 f16:	99 1f       	adc	r25, r25
 f18:	aa 1f       	adc	r26, r26
 f1a:	a2 17       	cp	r26, r18
 f1c:	10 f0       	brcs	.+4      	; 0xf22 <__ultoa_common+0x26>
 f1e:	a2 1b       	sub	r26, r18
 f20:	63 95       	inc	r22
 f22:	38 50       	subi	r19, 0x08	; 8
 f24:	a9 f7       	brne	.-22     	; 0xf10 <__ultoa_common+0x14>
 f26:	a0 5d       	subi	r26, 0xD0	; 208
 f28:	aa 33       	cpi	r26, 0x3A	; 58
 f2a:	08 f0       	brcs	.+2      	; 0xf2e <__ultoa_common+0x32>
 f2c:	a9 5d       	subi	r26, 0xD9	; 217
 f2e:	a1 93       	st	Z+, r26
 f30:	36 f7       	brtc	.-52     	; 0xefe <__ultoa_common+0x2>
 f32:	b1 11       	cpse	r27, r1
 f34:	b1 93       	st	Z+, r27
 f36:	10 82       	st	Z, r1
 f38:	ca 01       	movw	r24, r20
 f3a:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <strrev>

00000f3e <strrev>:
 f3e:	dc 01       	movw	r26, r24
 f40:	fc 01       	movw	r30, r24
 f42:	67 2f       	mov	r22, r23
 f44:	71 91       	ld	r23, Z+
 f46:	77 23       	and	r23, r23
 f48:	e1 f7       	brne	.-8      	; 0xf42 <strrev+0x4>
 f4a:	32 97       	sbiw	r30, 0x02	; 2
 f4c:	04 c0       	rjmp	.+8      	; 0xf56 <strrev+0x18>
 f4e:	7c 91       	ld	r23, X
 f50:	6d 93       	st	X+, r22
 f52:	70 83       	st	Z, r23
 f54:	62 91       	ld	r22, -Z
 f56:	ae 17       	cp	r26, r30
 f58:	bf 07       	cpc	r27, r31
 f5a:	c8 f3       	brcs	.-14     	; 0xf4e <strrev+0x10>
 f5c:	08 95       	ret

00000f5e <_exit>:
 f5e:	f8 94       	cli

00000f60 <__stop_program>:
 f60:	ff cf       	rjmp	.-2      	; 0xf60 <__stop_program>
